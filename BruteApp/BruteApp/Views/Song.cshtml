@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<ContentModels.Song>
@using ContentModels = Umbraco.Web.PublishedContentModels;
@using BruteApp.Helpers;
@using Umbraco.Web.Models
@using System.Linq;
@using BruteApp.Models
@using Examine.LuceneEngine.Directories
@using Umbraco.Web;

@{
    Layout = "MasterLayout.cshtml";
    var main = (MainPage)Umbraco.TypedContentSingleAtXPath(string.Format("//{0}", AttributeHelper.GetTypeAlias<MainPage>()));
}

@section styles {
    <link href="~/css/print.css" rel="stylesheet"/>
    <link href="~/css/select2.css" rel="stylesheet" />
    <link href="~/css/song.css" rel="stylesheet" />
}


@section sidebar {
        <li class="active">
            <a href="@Model.Content.Parent.Url">
                <span>@Model.Content.Parent.GetPropertyValue("navigationName")</span>
                <i class="br-down"></i>
            </a>
            <ul class="collapse">
                @foreach (var publishedContent in Model.Content.Parent.Children.OrderBy(x => x.GetPropertyValue("songName")))
                {
                    var song = (Song)publishedContent;
                    <li @(song.SongName == Model.Content.SongName ? "class=active" : string.Empty)>
                        <a href="@song.Url">@song.SongName</a>
                    </li>
                }
            </ul>
        </li>
}


<article>
    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="filters-section">
                    <div class="col-xl-5">
                        <div class="search">
                            <select style="display: none;" class="search-bar" type="text" placeholder="Введите название группы" autocomplete="off" autocorrect="off"></select>
                        </div>
                    </div>
                    @CreateCatlogMenu()
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-10">
                    <div class="song">
                        <h1>@Model.Content.Parent.GetPropertyValue("NavigationName") - @Model.Content.SongName перевод песни</h1>
                        <span class="for-print">@main.TopTitle</span>
                        <p>
                            @(Html.Raw(!string.IsNullOrWhiteSpace(Model.Content.Description) ? Model.Content.Description : main.DefaultDescription.Replace("{0}", "<strong>" + Model.Content.Parent.GetPropertyValue("navigationName") + "</strong>").Replace("{1}", "<strong>" + Model.Content.SongName + "</strong>")))
                        </p>
                        <div class="btns-panel">
                            <div class="left">
                                <button id="original" class="btn btn-secondary" data-toggle="tooltip" data-placement="right" data-animation="false" title="Скопировать оригинал" class="">
                                    <i class="br-copy"></i>
                                </button>
                            </div>
                            <div class="right">
                                <button id="translation" class="btn btn-secondary" data-toggle="tooltip" data-placement="left" data-animation="false" title="Скопировать перевод">
                                    <i class="br-copy"></i>
                                </button>
                                <button class="print btn btn-secondary" data-toggle="tooltip" data-placement="right" data-animation="false" title="Распечатать">
                                    <i class="br-print"></i>
                                </button>
                            </div>
                        </div>                        
                            <div class="text">
                                @if (!string.IsNullOrEmpty(Model.Content.SongName) || !string.IsNullOrEmpty(Model.Content.SongNameTranslation))
                                {
                                    <div class="string title">
                                        <div class="original">@Model.Content.SongName</div>
                                        <div class="translate">@Model.Content.SongNameTranslation</div>
                                    </div>
                                }
                                @foreach (var item in CurrentPage.SongText)
                                {
                                    <div class="string">
                                        <div class="original">@item.OriginalText</div>
                                        <div class="translate">@item.TranslatedText</div>
                                    </div>
                                }
                            </div>
                            <span class="for-print">@main.BottomTitle</span>                        
                    </div>
                </div>

            </div>
        </div>

        <div class="author">
            <p>
                @{
                    var links = Model.Content.GetPropertyValue<RelatedLinks>("translator");
                    if (links != null)
                    {
                        <span>
                            Автор перевода:
                            @foreach (var item in links)
                            {
                                <a href="@item.Link" @(item.NewWindow ? "target=blank" : string.Empty)> @item.Caption</a>
                            }
                        </span>
                    }
                }

                При полном или частичном копировании данного материала указывайте
                активную ссылку на сайт (<a href="@main.UrlAbsolute()">@main.UrlAbsolute()</a>),
                а также авторов перевода.
            </p>
        </div>
    </div>
</article>

@section tooltip {
<script src="~/scripts/tether.min.js"></script>
<script src="~/scripts/bootstrap.min.js"></script>
<script>
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
</script>
}

@section scripts {
    <script src="~/scripts/select2.min.js"></script>
    <script src="~/scripts/search.js"></script>
    <script src="~/scripts/printThis.js"></script>
    <script src="~/scripts/clipboard.min.js"></script>
}

@helper CreateCatlogMenu()
{
    var sections = Umbraco.TypedContentAtXPath("//section");

    <div class="col-xl-7 no-padding">
        <div class="filter">
            <p>Выберите исполнителя по первой букве (цифре):</p>
            <ul>
                @foreach (var item in sections.OrderBy(x => x.GetPropertyValue("NavigationName")))
                {
                    if ((string) item.GetPropertyValue("navigationName") != string.Empty)
                    {
                        <li>
                            <a href="@item.Url">@item.GetPropertyValue("navigationName")</a>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
}